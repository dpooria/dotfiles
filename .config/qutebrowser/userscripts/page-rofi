#!/usr/bin/env python3
import os
import subprocess


def qcmd(cmd: str) -> None:
    fifo = os.environ.get("QUTE_FIFO")
    if not fifo:
        raise SystemExit(1)
    with open(fifo, "a", encoding="utf-8") as f:
        f.write(cmd + "\n")


def show_rofi_menu(page: str, algo='fuzzy') -> str | None:
    rofi_command = ["rofi", "-dmenu", "-p", "Current page fuzzy",
                    "-matching", algo, "-sorting-method", "fzf", "-sort"]
    try:
        result = subprocess.run(rofi_command, input=page,
                                capture_output=True, text=True, check=True,)
        return result.stdout.strip()
    except subprocess.CalledProcessError:
        # cancelled
        return None


def main() -> int:
    path = os.environ.get("QUTE_TEXT")
    if path is None:
        return 1
    with open(path, 'r', encoding='utf-8') as f:
        text = f.read()
    # TODO: make this adjustable
    batch_size = 92
    data = []
    # split long lines
    for raw_line in text.splitlines():
        line = raw_line.strip("\r\n")
        for i in range(0, len(line), batch_size):
            data.append(line[i: i + batch_size].strip())

    selected_line = show_rofi_menu('\n'.join(data))
    if selected_line is not None:
        qcmd(f'search {selected_line.strip()}')
    return 0


if __name__ == "__main__":
    raise SystemExit(main())
